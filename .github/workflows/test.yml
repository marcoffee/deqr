name: Test

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip build poetry
      - name: Check version is coherent
        run: |
          python .github/workflows/version_check.py "deqr/__init__.py" "$(poetry version -s)"
      - name: Build
        # have to use -I here because otherwise python will pick up build.py because
        # python does very stupid things with its import path. -P would be the more
        # proper flag, but that doesn't exist until 3.11, so it's not generally
        # useful.
        run: |
          python -Im build

  build-linux:
    defaults: {run: {working-directory: deqr-build}}
    runs-on: ${{ matrix.platform }}
    container:
      image: ghcr.io/torque/deqr/linux-build:${{ matrix.arch }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - [self-hosted, linux, ARM64]
          - ubuntu-latest
        include:
          - platform: [self-hosted, linux, ARM64]
            arch: 2_28_aarch64
          - platform: ubuntu-latest
            arch: 2_28_x86_64

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0
          path: deqr-build
      - name: Check version is coherent
        run: |
          "${PY311}" .github/workflows/version_check.py "deqr/__init__.py" "$("${POETRY}" version -s)"
      # The container already has all of the python versions in it and dependencies
      # installed, so we can just shotgun this.
      - name: Build
        run: |
          echo "::group::Build for Python 3.8"
          "${PY38}" -Im build
          echo "::endgroup::"

          echo "::group::Clean Python 3.8 artifacts"
          git clean -fdxe dist
          echo "::endgroup::"

          echo "::group::Build for Python 3.9"
          "${PY39}" -Im build
          echo "::endgroup::"

          echo "::group::Clean Python 3.9 artifacts"
          git clean -fdxe dist
          echo "::endgroup::"

          echo "::group::Build for Python 3.10"
          "${PY310}" -Im build
          echo "::endgroup::"

          echo "::group::Clean Python 3.10 artifacts"
          git clean -fdxe dist
          echo "::endgroup::"

          echo "::group::Build for Python 3.11"
          "${PY311}" -Im build
          echo "::endgroup::"

          echo "::group::Clean Python 3.11 artifacts"
          git clean -fdxe dist
          echo "::endgroup::"
      - name: Cleanup
        if: ${{ always() }}
        run: git clean -fdx
